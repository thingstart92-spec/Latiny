import React, { useState, useEffect } from "react";
import { motion } from "framer-motion";

// üìö –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç–µ—Ä–º–∏–Ω–æ–≤
const TERMS = [
  { la: "Verticalis", tr: "–≤–µ—Ä—Ç—ñ–∫–ê–ª—ñ—Å", ua: "–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∏–π, –ø—Ä—è–º–æ–≤–∏—Å–Ω–∏–π" },
  { la: "Dexter", tr: "–¥–ï–∫—Å—Ç–µ—Ä", ua: "–ü—Ä–∞–≤–∏–π" },
  { la: "Sinister", tr: "—Å–Ü–Ω—ñ—Å—Ç–µ—Ä", ua: "–õ—ñ–≤–∏–π" },
  { la: "Intermedius", tr: "—ñ–Ω—Ç–µ—Ä–º–ï–¥—ñ—É—Å", ua: "–ü—Ä–æ–º—ñ–∂–Ω–∏–π" },
  { la: "Medius", tr: "–º–ï–¥—ñ—É—Å", ua: "–°–µ—Ä–µ–¥–Ω—ñ–π" },
  { la: "Medialis", tr: "–º–µ–¥—ñ–ê–ª—ñ—Å", ua: "–ü—Ä–∏—Å–µ—Ä–µ–¥–Ω—ñ–π, –º–µ–¥—ñ–∞–ª—å–Ω–∏–π" },
  { la: "Lateralis", tr: "–ª–∞—Ç–µ—Ä–ê–ª—ñ—Å", ua: "–ë—ñ—á–Ω–∏–π, –ª–∞—Ç–µ—Ä–∞–ª—å–Ω–∏–π" },
  { la: "Anterior", tr: "–∞–Ω—Ç–ï—Ä—ñ–æ—Ä", ua: "–ü–µ—Ä–µ–¥–Ω—ñ–π" },
  { la: "Posterior", tr: "–ø–æ—Å—Ç–ï—Ä—ñ–æ—Ä", ua: "–ó–∞–¥–Ω—ñ–π" },
  { la: "Ventralis", tr: "–≤–µ–Ω—Ç—Ä–ê–ª—ñ—Å", ua: "–ß–µ—Ä–µ–≤–Ω–∏–π, –≤–µ–Ω—Ç—Ä–∞–ª—å–Ω–∏–π" },
  { la: "Dorsalis", tr: "–¥–æ—Ä—Å–ê–ª—ñ—Å", ua: "–°–ø–∏–Ω–Ω–∏–π, —Ç–∏–ª—å–Ω–∏–π, –¥–æ—Ä—Å–∞–ª—å–Ω–∏–π" },
  { la: "Superior", tr: "—Å—É–ø–ï—Ä—ñ–æ—Ä", ua: "–í–µ—Ä—Ö–Ω—ñ–π" },
  { la: "Inferior", tr: "—ñ–Ω—Ñ–ï—Ä—ñ–æ—Ä", ua: "–ù–∏–∂–Ω—ñ–π" },
  { la: "Cranialis", tr: "–∫—Ä–∞–Ω—ñ–ê–ª—ñ—Å", ua: "–ß–µ—Ä–µ–ø–Ω–∏–π, –∫—Ä–∞–Ω—ñ–∞–ª—å–Ω–∏–π" },
  { la: "Caudalis", tr: "–∫–∞—É–¥–ê–ª—ñ—Å", ua: "–•–≤–æ—Å—Ç–æ–≤–∏–π, –∫–∞—É–¥–∞–ª—å–Ω–∏–π" },
  { la: "Internus", tr: "—ñ–Ω—Ç–ï—Ä–Ω—É—Å", ua: "–í–Ω—É—Ç—Ä—ñ—à–Ω—ñ–π" },
  { la: "Externus", tr: "–µ–∫—Å—Ç–ï—Ä–Ω—É—Å", ua: "–ó–æ–≤–Ω—ñ—à–Ω—ñ–π" },
  { la: "Superficialis", tr: "—Å—É–ø–µ—Ä—Ñ—ñ—Ü—ñ–ê–ª—ñ—Å", ua: "–ü–æ–≤–µ—Ä—Ö–Ω–µ–≤–∏–π" },
  { la: "Profundus", tr: "–ø—Ä–æ—Ñ–£–Ω–¥—É—Å", ua: "–ì–ª–∏–±–æ–∫–∏–π" },
  { la: "Proximalis", tr: "–ø—Ä–æ–∫—Å—ñ–º–ê–ª—ñ—Å", ua: "–ë–ª–∏–∂—á–∏–π, –ø—Ä–æ–∫—Å–∏–º–∞–ª—å–Ω–∏–π" },
  { la: "Distalis", tr: "–¥—ñ—Å—Ç–ê–ª—ñ—Å", ua: "–î–∞–ª—å—à–∏–π, –∫—ñ–Ω—Ü–µ–≤–∏–π, –¥–∏—Å—Ç–∞–ª—å–Ω–∏–π" },
  { la: "Centralis", tr: "—Ü–µ–Ω—Ç—Ä–∞–ª–Ü—Å", ua: "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∏–π" },
  { la: "Plana frontalia", tr: "–ø–ª–ê–Ω–∞ —Ñ—Ä–æ–Ω—Ç–ê–ª—ñ–∞", ua: "–õ–æ–±–æ–≤—ñ –ø–ª–æ—â–∏–Ω–∏" },
  { la: "Plana horizontalia", tr: "–ø–ª–ê–Ω–∞ –≥–æ—Ä–∏–∑–æ–Ω—Ç–ê–ª—ñ–∞", ua: "–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ñ –ø–ª–æ—â–∏–Ω–∏" },
  { la: "Plana sagittalia", tr: "–ø–ª–ê–Ω–∞ —Å–∞–≥—ñ—Ç—Ç–ê–ª—ñ–∞", ua: "–°—Ç—Ä—ñ–ª–æ–≤—ñ –ø–ª–æ—â–∏–Ω–∏" },
  { la: "Planum medianum", tr: "–ø–ª–ê–Ω—É–ª –º–µ–¥—ñ–ê–Ω—É–º", ua: "–°–µ—Ä–µ–¥–∏–Ω–Ω–∞ –ø–ª–æ—â–∏–Ω–∞" },
  { la: "Plana paramediana", tr: "–ø–ª–ê–Ω–∞ –ø–∞—Ä–∞–º–µ–¥—ñ–ê–Ω–∞", ua: "–ü—Ä–∏—Å–µ—Ä–µ–¥–∏–Ω–Ω—ñ –ø–ª–æ—â–∏–Ω–∏" },
];

// üé≤ –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞
function shuffle(arr) {
  return [...arr].sort(() => Math.random() - 0.5);
}

// üß© –û—á–µ—Ä–µ–¥—å –∫–∞—Ä—Ç–æ—á–µ–∫
function useQueue(list) {
  const [queue, setQueue] = useState(shuffle(list));

  function know() {
    setQueue((q) => q.slice(1));
  }

  function dontKnow() {
    setQueue((q) => {
      const [first, ...rest] = q;
      // –ß—Ç–æ–±—ã –Ω–µ –ø–æ–ø–∞–¥–∞–ª–æ—Å—å –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ –ø–æ–¥—Ä—è–¥
      if (rest.length > 0 && rest[0].la === first.la) {
        return [...rest.slice(1), rest[0], first];
      }
      return [...rest, first];
    });
  }

  function reset() {
    setQueue(shuffle(list));
  }

  return {
    current: queue[0],
    left: queue.length,
    know,
    dontKnow,
    reset,
    total: list.length,
  };
}

// üé¥ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–∞—Ä—Ç–æ—á–∫–∏
function Flashcard({ term, invert }) {
  const [showAnswer, setShowAnswer] = useState(false);

  return (
    <motion.div
      key={term.la}
      initial={{ opacity: 0, y: 50 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.3 }}
      className="mb-6 rounded-2xl border border-neutral-200 bg-white p-6 shadow-lg text-center"
    >
      <h2 className="text-2xl font-bold mb-2">
        {invert ? (showAnswer ? term.la : term.ua) : (showAnswer ? term.ua : term.la)}
      </h2>
      {(invert ? showAnswer : !showAnswer) && (
        <p className="text-neutral-500 italic mb-4">{term.tr}</p>
      )}
      <button
        onClick={() => setShowAnswer((s) => !s)}
        className="mx-auto mb-4 block rounded-xl border border-neutral-200 bg-neutral-50 px-4 py-2 text-sm hover:bg-neutral-100"
      >
        {showAnswer ? "–°–∫—Ä—ã—Ç—å –ø–µ—Ä–µ–≤–æ–¥" : "–ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥"}
      </button>
    </motion.div>
  );
}

// üöÄ –ì–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
export default function AnatomyTermsApp() {
  const { current, left, know, dontKnow, reset, total } = useQueue(TERMS);
  const [invert, setInvert] = useState(true);

  // ‚å®Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
  useEffect(() => {
    function handleKey(e) {
      if (!current) return;
      if (e.key === "ArrowRight") know();
      if (e.key === "ArrowDown") dontKnow();
      if (e.key === "ArrowUp") {
        const btn = document.querySelector("button.mx-auto");
        if (btn) btn.click();
      }
    }
    window.addEventListener("keydown", handleKey);
    return () => window.removeEventListener("keydown", handleKey);
  }, [current]);

  if (!current) {
    return (
      <div className="text-center p-6">
        <h1 className="text-3xl font-bold mb-4">üéâ –ú–æ–ª–æ–¥–µ—Ü!</h1>
        <p className="mb-6">
          –í—Å–µ–≥–æ —Å–ª–æ–≤: {total}
        </p>
        <button
          onClick={reset}
          className="rounded-xl bg-green-500 px-6 py-3 text-white shadow hover:bg-green-600"
        >
          üîÅ –ù–∞—á–∞—Ç—å —Å–Ω–æ–≤–∞
        </button>
      </div>
    );
  }

  return (
    <div className="max-w-xl mx-auto text-center p-6">
      <h1 className="text-2xl font-bold mb-4">–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Ç–µ—Ä–º–∏–Ω–æ–≤</h1>
      <p className="mb-6 text-neutral-600">
        –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ ‚Üî –õ–∞—Ç–∏–Ω—å. –û—Ç–≤–µ—á–∞–π—Ç–µ: –∑–Ω–∞–µ—Ç–µ –∏–ª–∏ –Ω–µ –∑–Ω–∞–µ—Ç–µ.
      </p>

      <Flashcard term={current} invert={invert} />

      <button
        onClick={() => setInvert((i) => !i)}
        className="mb-6 rounded-xl border border-neutral-200 bg-white px-4 py-2 text-sm shadow-sm hover:shadow"
      >
        –ü–æ–º–µ–Ω—è—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (—Å–µ–π—á–∞—Å: {invert ? "UA ‚Üí LA" : "LA ‚Üí UA"})
      </button>

      <div className="flex justify-center gap-4 mb-4">
        <button
          onClick={know}
          className="rounded-xl bg-blue-500 px-6 py-3 text-white shadow hover:bg-blue-600"
        >
          –ó–Ω–∞—é
        </button>
        <button
          onClick={dontKnow}
          className="rounded-xl bg-red-500 px-6 py-3 text-white shadow hover:bg-red-600"
        >
          –ù–µ –∑–Ω–∞—é
        </button>
      </div>

      <p className="text-neutral-600">–û—Å—Ç–∞–ª–æ—Å—å —Å–ª–æ–≤: {left} –∏–∑ {total}</p>
    </div>
  );
}
